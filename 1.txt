

<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<title>HOA CÚC TRẮNG IOS APPLE</title>
<link rel="icon" type="image/png" sizes="16x16" href="https://mysitele.netlify.app/icon/iconweb.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://mysitele.netlify.app/icon/iconweb.png">
<link rel="apple-touch-icon" href="https://mysitele.netlify.app/icon/iconweb.png">
<meta name="theme-color" media="(prefers-color-scheme: light)" content="#007bff">
<meta name="theme-color" media="(prefers-color-scheme: dark)" content="#007bff">

<!☘️ Script Ko hỗ trợ -->
<script src="https://mysitele.netlify.app/script/unsupported.shit"></script>
<script src="https://mysitele.netlify.app/script/chicken.shit"></script>

<style>
:root {
    --primary-white: #FFFFFF; --off-white-light: #F8F9FA; --off-white-medium: #E9ECEF;
    --accent-color: #007bff; --secondary-color: #ff00ff; --custom-green-color: #28a745;
    --text-color-dark: #343A40; --border-radius: 15px; --box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    --default-radius: 18px;
}
* { margin: 0; padding: 0; box-sizing: border-box; }
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background-color: #f0f2f5; color: var(--text-color-dark); line-height: 1.6; overflow: hidden;
}
.top-bar {
    position: fixed; top: 0; left: 0; right: 0; z-index: 110; display: flex;
    justify-content: center; align-items: center; padding: 8px 0;
    background-color: rgba(255, 255, 255, 0.85); backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px); border-bottom: 1px solid rgba(0,0,0,0.08);
}
#messages-container {
    display: flex; flex-direction: column; gap: 10px; margin: 0 auto; padding: 10px;
    position: fixed; top: 50px; bottom: 60px; overflow-y: auto; scroll-behavior: smooth;
    background: linear-gradient(to right, #f3e0ff, #e0f7ff); left: 0; right: 0;
}
#messages-container p {
    font-size: 14px; padding: 10px 15px; border-radius: 18px; max-width: 80%;
    width: fit-content; word-break: break-word; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); margin: 3px;
}
.user-message {
    background-color: #ffffff; align-self: flex-start; margin-left: 0; margin-right: 20px;
    display: flex; flex-direction: column; align-items: flex-start;
}
.user-message .user-label { font-size: 11px; font-weight: 600; color: #5bc8a1; margin-bottom: 4px; }
.user-message .user-text-content { line-height: 1.4; font-weight: bold; color: #2AAB81; }
#messages-container .operator-message {
    background-color: #ffffff; align-self: flex-end; margin-left: 20px; margin-right: 0;
    display: flex; flex-direction: column; align-items: flex-start;
}
.operator-message .operator-label { font-size: 11px; font-weight: 600; color: #9d84ff; margin-bottom: 4px; }
.operator-message .admin-text-content { line-height: 1.4; font-weight: bold; color: #6e44ff; }
.container1 {
    display: flex; align-items: center; padding: 5px; position: fixed; bottom: 10px;
    border-top: 1px solid #DEE2E6; z-index: 100; left: 10px; right: 10px; width: auto;
    background-color: var(--primary-white); border-radius: var(--default-radius);
}
#chat-container { display: flex; width: 100%; align-items: flex-end; gap: 5px; }
#image-input { display: none; }
#file-label {
    display: flex; align-items: center; justify-content: center; width: 36px; height: 36px;
    background-color: #F8F9FA; border: 1px solid #DEE2E6; border-radius: var(--default-radius);
    font-size: 17px; cursor: pointer; flex-shrink: 0; transition: background-color 0.2s;
}
#file-label:hover { background-color: #e2e6ea; }
.input {
    height: 36px; min-height: 36px; padding: 7px 12px; box-sizing: border-box; text-align: left;
    font-size: 16px; flex-grow: 1; min-width: 0; border: 1px solid #DEE2E6;
    background-color: #F8F9FA; border-radius: var(--default-radius); resize: none; overflow-y: hidden; line-height: 1.4;
}
.dow {
    width: 36px; height: 36px; display: flex; justify-content: center; align-items: center;
    color: #007bff; font-size: 18px; border: 1px solid #DEE2E6; cursor: pointer;
    background-color: #F8F9FA; border-radius: var(--default-radius); flex-shrink: 0; transition: background-color 0.2s;
}
.dow:hover { background-color: #e2e6ea; }
button { border: none; cursor: pointer; }
a { text-decoration: none; }
#file-link { color: #007bff; text-decoration: none; font-weight: bold; font-size: inherit; display: inline; }
#messages-container img {
    width: 70vw; max-width: 100%; height: auto; border-radius: 15px;
    margin: 5px 0; align-self: center; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25);
}
#scroll-to-top-btn, #scroll-to-bottom-btn {
    position: fixed; right: 15px; z-index: 101; display: none; opacity: 0;
    pointer-events: none; transition: opacity 0.3s, transform 0.3s;
}
#scroll-to-top-btn { bottom: 120px; }
#scroll-to-bottom-btn { bottom: 75px; }
#scroll-to-top-btn.visible, #scroll-to-bottom-btn.visible { display: flex; opacity: 1; pointer-events: auto; }
.scroll-nav-btn {
    width: 36px; height: 36px; border-radius: 50%; background-color: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(5px); border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); font-size: 20px; color: #333;
    display: flex; align-items: center; justify-content: center;
    cursor: pointer; transition: background-color 0.2s, transform 0.2s;
}
.scroll-nav-btn:hover { background-color: white; transform: scale(1.1); }
#auth-button {
    background: var(--primary-white); border: 1px solid var(--off-white-medium); color: var(--accent-color);
    font-weight: 700; cursor: pointer; font-family: inherit; font-size: 1em; border-radius: 12px;
    text-align: center; transition: all 0.2s ease; box-shadow: 0 4px 8px rgba(0, 123, 255, 0.15);
    height: auto; width: auto; padding: 6px 16px; white-space: nowrap;
}
#auth-button:hover { background-color: var(--off-white-light); box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
.modal {
    display: none; position: fixed; z-index: 2000; left: 0; top: 0; width: 100%; height: 100%;
    overflow: auto; background-color: rgba(0,0,0,0.6); justify-content: center; align-items: center; animation: fadeIn 0.3s ease;
}
@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
@keyframes slideIn { from { transform: translateY(-20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
.modal-content {
    position: relative; background-color: #fefefe; margin: auto; padding: 25px; border: 1px solid #888;
    width: 90%; max-width: 450px; border-radius: var(--border-radius); box-shadow: 0 5px 15px rgba(0,0,0,0.3); animation: slideIn 0.4s ease;
}
.close-button { color: #aaa; font-size: 28px; font-weight: bold; position: absolute; top: 10px; right: 20px; z-index: 10; }
.close-button:hover, .close-button:focus { color: black; text-decoration: none; cursor: pointer; }
.tab-buttons { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 20px; }
.tab-button {
    padding: 12px 10px; cursor: pointer; border: 2px solid var(--off-white-medium); background-color: var(--primary-white);
    border-radius: var(--border-radius); font-size: 1.05em; font-weight: 500; transition: all 0.3s ease; text-align: center;
}
.tab-button:hover { background-color: var(--off-white-light); transform: translateY(-3px); }
.tab-button[data-tab="login"] { color: var(--secondary-color); box-shadow: 0 10px 20px rgba(255, 0, 255, 0.25); }
.tab-button[data-tab="register"] { color: var(--custom-green-color); box-shadow: 0 10px 20px rgba(40, 167, 69, 0.25); }
.tab-button.active { color: var(--primary-white); }
.tab-button[data-tab="login"].active { background-color: var(--secondary-color); border-color: #e600e6; }
.tab-button[data-tab="register"].active { background-color: var(--custom-green-color); border-color: #32c453; }
.tab-separator { border: none; height: 1px; background-color: var(--off-white-medium); margin: 25px 0; }
.tab-content-panel { display: none; animation: fadeIn 0.5s ease; min-height: auto; padding-top: 20px; }
.tab-content-panel.active { display: block; }
.form-label { text-align: left; margin: 10px 0 5px 0; max-width: 100%; font-size: 0.9em; color: var(--text-color-dark); display: block; }
.input-wrapper, .btn-styled {
    display: flex; align-items: center; justify-content: center; width: 100%; margin: 0 auto 15px auto; padding: 12px 15px;
    background-color: var(--primary-white); color: var(--accent-color); border: 2px solid var(--off-white-medium);
    border-radius: var(--border-radius); box-shadow: 0 10px 20px rgba(0, 123, 255, 0.25); font-weight: 500;
    font-size: 1.05em; text-align: center; text-decoration: none; cursor: pointer; transition: all 0.25s ease-out;
}
.input-wrapper .input, .btn-styled .input { all: unset; box-sizing: border-box; width: 100%; height: 100%; padding: 0; font-weight: 500; font-size: 1.05em; color: var(--accent-color); text-align: center; }
.auth-error { color: red; font-size: 0.9em; text-align: center; margin-top: 10px; display: none; }
</style>
</head>
<body>

<div class="top-bar">
    <button id="auth-button" data-logged-in="false" data-user-name=""></button>
</div>
<div id="messages-container" class="scrollbox"></div>
<button id="scroll-to-top-btn" class="scroll-nav-btn" title="Cuộn lên trên cùng">∧</button>
<button id="scroll-to-bottom-btn" class="scroll-nav-btn" title="Cuộn xuống dưới cùng">∨</button>
<div class="container1">
    <div id="chat-container">
        <input type="file" id="image-input" accept="image/*">
        <label for="image-input" id="file-label">📎</label>
        <textarea id="message-input" class="input" placeholder="Nhập tin nhắn..." rows="1"></textarea>
        <button id="send-btn" class="dow">➤</button>
    </div>
</div>
<div id="auth-modal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <div class="tab-buttons">
            <button class="tab-button active" data-tab="login">Đăng Nhập</button>
            <button class="tab-button" data-tab="register">Đăng Ký</button>
        </div>
        <hr class="tab-separator">
        <div class="tab-content-panels">
            <div id="tab-content-login" class="tab-content-panel active"><form id="login-form"><label for="login-email" class="form-label">Email</label><div class="input-wrapper"><input type="email" id="login-email" class="input" required></div><label for="login-password" class="form-label">Mật khẩu</label><div class="input-wrapper"><input type="password" id="login-password" class="input" required></div><button type="submit" class="btn-styled">Đăng Nhập</button><p id="login-error" class="auth-error"></p></form></div>
            <div id="tab-content-register" class="tab-content-panel"><form id="register-form"><label for="register-name" class="form-label">Tên hiển thị</label><div class="input-wrapper"><input type="text" id="register-name" class="input" required></div><label for="register-email" class="form-label">Email</label><div class="input-wrapper"><input type="email" id="register-email" class="input" required></div><label for="register-password" class="form-label">Mật khẩu</label><div class="input-wrapper"><input type="password" id="register-password" class="input" required></div><button type="submit" class="btn-styled">Đăng Ký</button><p id="register-error" class="auth-error"></p></form></div>
        </div>
    </div>
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
    import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";
    const firebaseConfig = { apiKey: "AIzaSyCzPI1I1aw1lQdYMihWvsPiZ6AJ1FbWO1A", authDomain: "hoacuctrang-60e6d.firebaseapp.com", projectId: "hoacuctrang-60e6d", storageBucket: "hoacuctrang-60e6d.firebasestorage.app", messagingSenderId: "14995055087", appId: "1:14995055087:web:519f3e648e64550dd6961a", measurementId: "G-JFG0Z5VFL8" };
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    window.firebaseAuth = auth;
    const modal = document.getElementById('auth-modal'), authButton = document.getElementById('auth-button'), closeButton = document.querySelector('.close-button'), loginForm = document.getElementById('login-form'), registerForm = document.getElementById('register-form'), loginError = document.getElementById('login-error'), registerError = document.getElementById('register-error');
    const openModal = () => modal.style.display = 'flex';
    const closeModal = () => { modal.style.display = 'none'; loginError.style.display = 'none'; registerError.style.display = 'none'; };
    authButton.addEventListener('click', () => { auth.currentUser ? signOut(auth) : openModal(); });
    closeButton.addEventListener('click', closeModal);
    window.addEventListener('click', (event) => { if (event.target == modal) closeModal(); });
    registerForm.addEventListener('submit', (e) => { e.preventDefault(); const n = registerForm['register-name'].value, m = registerForm['register-email'].value, p = registerForm['register-password'].value; createUserWithEmailAndPassword(auth, m, p).then(c => updateProfile(c.user, { displayName: n })).then(() => { registerForm.reset(); closeModal(); alert('Đăng ký thành công!'); }).catch(err => { registerError.textContent = err.message; registerError.style.display = 'block'; }); });
    loginForm.addEventListener('submit', (e) => { e.preventDefault(); const m = loginForm['login-email'].value, p = loginForm['login-password'].value; signInWithEmailAndPassword(auth, m, p).then(() => { loginForm.reset(); closeModal(); }).catch(err => { loginError.textContent = err.message; loginError.style.display = 'block'; }); });
    onAuthStateChanged(auth, (user) => { if (user) { authButton.dataset.loggedIn = 'true'; authButton.dataset.userName = user.displayName || 'User'; authButton.textContent = `Chào, ${user.displayName || 'User'}`; } else { authButton.dataset.loggedIn = 'false'; authButton.dataset.userName = ''; authButton.textContent = 'Đăng Nhập'; } });
    const authModalContainer = document.getElementById('auth-modal');
    if (authModalContainer) { const tabButtons = authModalContainer.querySelector('.tab-buttons'), contentPanels = authModalContainer.querySelectorAll('.tab-content-panel'); tabButtons.addEventListener('click', (e) => { const clickedButton = e.target.closest('.tab-button'); if (!clickedButton) return; tabButtons.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active')); clickedButton.classList.add('active'); contentPanels.forEach(panel => panel.classList.remove('active')); const targetPanel = document.getElementById(`tab-content-${clickedButton.dataset.tab}`); if (targetPanel) targetPanel.classList.add('active'); }); }
</script>

<script>
const timcook = unknow; 
const GITHUB_API_BASE_URL = 'https://api.github.com', GITHUB_REPO = 'Nguyenhuyhoan/Chat', CHAT_FILE_PATH = '1.txt';
let lastContent = '', isFetching = false;
const messageInput = document.getElementById('message-input'), imageInput = document.getElementById('image-input'), sendBtn = document.getElementById('send-btn'), messagesContainer = document.getElementById('messages-container'), scrollToTopBtn = document.getElementById('scroll-to-top-btn'), scrollToBottomBtn = document.getElementById('scroll-to-bottom-btn');

function b64ToArr(b){const s=window.atob(b),l=s.length,u=new Uint8Array(l);for(let i=0;i<l;i++){u[i]=s.charCodeAt(i);}return u.buffer;}
async function fileToB64(f){return new Promise((res,rej)=>{const r=new FileReader();r.readAsDataURL(f);r.onload=()=>res(r.result.split(',')[1]);r.onerror=e=>rej(e);});}
async function fetchGH(p){const u=`${GITHUB_API_BASE_URL}/repos/${GITHUB_REPO}/contents/${p}`,r=await fetch(u,{headers:{'Authorization':`token ${timcook}`,'Accept':'application/vnd.github.v3+json'}});if(!r.ok)throw new Error(`API Error: ${r.status}`);return r.json();}
async function updateGH(p,c,s){const u=`${GITHUB_API_BASE_URL}/repos/${GITHUB_REPO}/contents/${p}`,r=await fetch(u,{method:'PUT',headers:{'Authorization':`token ${timcook}`,'Content-Type':'application/json'},body:JSON.stringify({message:`Update ${p}`,content:c,sha:s})});if(!r.ok)throw new Error('Update failed.');}
async function uploadGH(f,p){const n=`${p}${Date.now()}-${f.name||'m.txt'}`,u=`${GITHUB_API_BASE_URL}/repos/${GITHUB_REPO}/contents/${n}`,c=await fileToB64(f);return new Promise((res,rej)=>{const x=new XMLHttpRequest();x.open('PUT',u,true);x.setRequestHeader('Authorization',`token ${timcook}`);x.setRequestHeader('Content-Type','application/json');x.onload=()=>{if(x.status===201){res(JSON.parse(x.responseText).content.download_url);}else{rej(new Error(`Upload Error: ${x.status}`));}};x.onerror=()=>rej(new Error('Network error.'));x.send(JSON.stringify({message:`upload ${f.name||'msg'}`,content:c}));});}
async function appendChat(c){try{const d=await fetchGH(CHAT_FILE_PATH),e=new TextDecoder('utf-8'),t=new TextEncoder(),o=d.content?e.decode(b64ToArr(d.content)):"",n=o+c,b=window.btoa(unescape(encodeURIComponent(n)));await updateGH(CHAT_FILE_PATH,b,d.sha);}catch(e){console.error("Append failed:",e);throw e;}}

function displayMessage(message, userName) {
    const p = document.createElement('p');
    const linkRegex = /(https?:\/\/[^\s]+|www\.[^\s]+)/g;
    const parseLinks = (text, parent) => { text.split(linkRegex).forEach(part => { if (part.match(linkRegex)) { const a = document.createElement('a'); a.href = part.startsWith('http') ? part : `http://${part}`; a.textContent = '🌟 Liên Kết 🌟'; a.target = '_blank'; parent.appendChild(a); } else { parent.appendChild(document.createTextNode(part)); } }); };
    if (userName.toLowerCase() === 'admin') {
        p.classList.add('operator-message');
        const label = document.createElement('div'); label.className = 'operator-label'; label.textContent = 'Admin';
        const content = document.createElement('div'); content.className = 'admin-text-content';
        parseLinks(message, content);
        p.appendChild(label); p.appendChild(content);
    } else {
        p.classList.add('user-message');
        const label = document.createElement('div'); label.className = 'user-label'; label.textContent = userName;
        const content = document.createElement('div'); content.className = 'user-text-content';
        parseLinks(message, content);
        p.appendChild(label); p.appendChild(content);
    }
    messagesContainer.appendChild(p);
}
function displayImage(url) { const img = document.createElement('img'); img.src = url; messagesContainer.appendChild(img); }

function renderContent(text) {
    const lines = text.split('\n').filter(line => line.trim() !== '');
    lines.forEach(line => {
        const imageRegex = /(https?:\/\/[^\s]+\.(?:jpeg|jpg|gif|png))/i;
        let userName, content, imageUrl, message;
        // *** SỬA LỖI: ƯU TIÊN KIỂM TRA ADMIN TRƯỚC ***
        if (line.trim().toUpperCase().startsWith('A.')) {
            userName = 'Admin';
            content = line.trim().substring(2).trim();
        } else {
            const newFormatMatch = line.match(/^\[(.*?)\]:\s*(.*)/);
            if (newFormatMatch) {
                userName = newFormatMatch[1];
                content = newFormatMatch[2];
            } else {
                userName = 'Khách';
                content = line;
            }
        }
        const imageMatch = content.match(imageRegex);
        imageUrl = imageMatch ? imageMatch[0] : null;
        message = imageUrl ? content.replace(imageUrl, '').trim() : content;
        if (message) displayMessage(message, userName);
        if (imageUrl) displayImage(imageUrl);
    });
}

async function fetchAndDisplay() {
    if (isFetching) return;
    isFetching = true;
    try {
        const url = `${GITHUB_API_BASE_URL}/repos/${GITHUB_REPO}/contents/${CHAT_FILE_PATH}?ref=main&t=${Date.now()}`;
        const res = await fetch(url, { headers: { 'Authorization': `token ${timcook}`, 'Accept': 'application/vnd.github.v3.raw' }, cache: 'no-store' });
        if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
        const text = await res.text();
        if (text !== lastContent) {
            const atBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop - messagesContainer.clientHeight < 50;
            messagesContainer.innerHTML = '';
            renderContent(text);
            lastContent = text;
            if(atBottom) messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    } catch (e) { console.error('Failed to fetch messages:', e); }
    finally { isFetching = false; }
}

async function handleSend() {
    const auth = window.firebaseAuth;
    if (!auth.currentUser) { alert("Bạn cần đăng nhập để gửi tin nhắn!"); document.getElementById('auth-modal').style.display = 'flex'; return; }
    const text = messageInput.value.trim();
    const file = imageInput.files[0];
    if (!text && !file) return;
    sendBtn.disabled = true; sendBtn.innerHTML = '...';
    const originalText = messageInput.value;
    messageInput.value = ''; imageInput.value = '';
    autoResize.call(messageInput);
    try {
        let finalMessage = text;
        if (file) {
            const filePath = await uploadGH(file, 'media/');
            finalMessage = text ? `${text} ${filePath}` : filePath;
        }
        let contentToAppend;
        // *** SỬA LỖI: ƯU TIÊN LƯU TIN NHẮN ADMIN ***
        if (finalMessage.trim().toUpperCase().startsWith('A.')) {
            contentToAppend = `${finalMessage}\n`;
        } else {
            const userName = auth.currentUser.displayName || 'User';
            contentToAppend = `[${userName}]: ${finalMessage}\n`;
        }
        await appendChat(contentToAppend);
        await fetchAndDisplay();
    } catch (e) { console.error("Send failed:", e); alert("Gửi thất bại!"); messageInput.value = originalText; }
    finally { sendBtn.disabled = false; sendBtn.innerHTML = '➤'; }
}

function autoResize() { this.style.height = 'auto'; this.style.height = this.scrollHeight + 'px'; }
function isAtBottom() { return messagesContainer.scrollHeight - messagesContainer.scrollTop - messagesContainer.clientHeight < 50; }
scrollToTopBtn.addEventListener('click', () => { messagesContainer.scrollTop = 0; });
scrollToBottomBtn.addEventListener('click', () => { messagesContainer.scrollTop = messagesContainer.scrollHeight; });
messagesContainer.addEventListener('scroll', () => {
    scrollToBottomBtn.classList.toggle('visible', !isAtBottom() && messagesContainer.scrollHeight > messagesContainer.clientHeight);
    scrollToTopBtn.classList.toggle('visible', messagesContainer.scrollTop > 200);
});
sendBtn.addEventListener('click', handleSend);
messageInput.addEventListener('keydown', (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSend(); } });
messageInput.addEventListener('input', autoResize, false);
document.addEventListener('DOMContentLoaded', () => { fetchAndDisplay(); setInterval(fetchAndDisplay, 3000); });
</script>

<script src="https://mysitele.netlify.app/script/blockads.shit"></script>
</body>
</html>
